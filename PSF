<?xml version="1.0" encoding="utf-8"?>
<Script>
  <Context>Zen26</Context>
  <Version>1.0</Version>
  <Language>Python</Language>
  <Text>Zen.Application.Documents.RemoveAll(False)
Zen.Application.MacroEditor.ClearMessages()
Zen.Application.Documents.RemoveAll(False)

#Lancer Experience
WF1 = ZenExperiment()
WF1.Load('WF1_test.czexp')

#Configuration Objectif et optovar
if Zen.Devices.ObjectiveChanger.ActualPosition != 3 :
  Zen.Devices.ObjectiveChanger.TargetPosition = 3
  Zen.Devices.ObjectiveChanger.Apply()
if Zen.Devices.Optovar.ActualPosition != 2 :
  Zen.Devices.Optovar.TargetPosition = 2
  Zen.Devices.Optovar.Apply()

#Live Autoexposure et AF
Zen.Acquisition.StartLive(WF1)
Zen.Acquisition.AutoExposure(WF1)
Zen.Acquisition.FindSurface()
Zen.Acquisition.FindAutofocus(WF1, 300)
Zen.Acquisition.AutoExposure(WF1)

#Sauvegarde de l'image et du Focus
Zen.Acquisition.StoreFocus()
Zen.Acquisition.StopLive(WF1)
filepath = "D:\DATA USERS\eqpimagerie\mehdi\Image_test"
Image = Zen.Acquisition.AcquireImage(WF1)
#Zen.Application.Save(Image,filepath+"\\Image.czi")

#Calcul du seuil de Saturation 
Bit = Image.Metadata.Format
BitDepth = int(Bit.Replace("Bit", ""))
saturation = 2**BitDepth - 2

#Setup (Image_analysis, Deplacement)
ias = ZenImageAnalysisSetting()
ias.Load("Billes10")
dp = 0

#Debuter l'intensite a 10%
HWS = ZenHardwareSetting()
Exposure_intensity = 10
HWS.SetParameter('MTBLED2_1', 'Intensity', Exposure_intensity)


#Boucle de controle de saturation et de dynamique
#Tant qu'on a effectue moins de 5 deplacement :
while dp &lt; 5:

#Verification AF et acauisition d'une premiere image
 Zen.Acquisition.StartLive(WF1)
 Zen.Acquisition.RecallFocus()
 Zen.Devices.Focus.Apply()
 Zen.Devices.ApplyHardwareSetting(HWS)
 #print("Intensite = {}%".format(HWS.GetParameter('MTBLED2_1' , 'Intensity')))
 Zen.Application.Pause("Regler le focus pour I = {}%".format(HWS.GetParameter('MTBLED2_1' , 'Intensity')))
 Zen.Acquisition.StoreFocus()
 Image = Zen.Acquisition.AcquireImage()
 Zen.Application.Documents.Add(Image)
 Zen.Analyzing.Analyze(Image, ias)
 tables = Zen.Analyzing.AnalyzeToTable(Image, ias)
 table = tables[0]
 Zen.Application.Documents.Add(table)
 Zen.Acquisition.StopLive(WF1)
 
#Extraction de l'intensite maximale et des coordonnees de la bille 
 I_max  = -1
 X_Imax = -1
 Y_Imax = -1
 D_Imax = -1
 for i in range(table.RowCount) : 
  x = table.GetValue(i,2)
  y = table.GetValue(i,3)
  I = table.GetValue(i,4)
  d = table.GetValue(i,5)
  if I &gt; I_max : 
    I_max = I
    X_Imax = x 
    Y_Imax = y 
    D_Imax = d
 #print("Imax = {}".format(I_max))

#Calcul de la distance de deplacement
 PosActuelX = Zen.Devices.Stage.ActualPositionX
 PosActuelY = Zen.Devices.Stage.ActualPositionY
 PosNextX = Zen.Devices.Stage.ActualPositionX +  X_Imax + D_Imax

#Deplacement en cas de saturation 
 if I_max &gt; saturation :
  Zen.Devices.Stage.MoveTo(PosNextX, PosActuelY)
  dp += 1
  
#Calcul de l'intensite d'exposition 
 elif I_max &lt; 9000 :
  Exposure_intensity += 0.5
  HWS.SetParameter('MTBLED2_1', 'Intensity', Exposure_intensity)
  print("La dynamique n'est pas suffisante")
  
#Sortir de la boucle si les conditions sont verifiees
 else : 
  break 
  
#Messages a afficher
if dp == 5 :
 print("Vous avez atteint le max deplacement")

#Calcul du centre de l'image en micron
Centre_micronX = float(Image.Metadata.SizeScaled.Remove(7))/2
x = Image.Metadata.SizeScaled.Remove(0,12)
Centre_micronY = float(x.Remove(7)) / 2 

#Calcul de la distance de deplacement 
dep_X = Centre_micronX - X_Imax
dep_Y = Centre_micronY - Y_Imax

#Deplacement et acquisition d'image finale
next_posX = Zen.Devices.Stage.ActualPositionX - dep_X
next_posY = Zen.Devices.Stage.ActualPositionY - dep_Y
Zen.Acquisition.StartLive(WF1)
Zen.Devices.Stage.MoveTo(next_posX, next_posY)
print("Intensite = {}%".format(HWS.GetParameter('MTBLED2_1' , 'Intensity')))
#print("La bille la plus intense et non saturee est :")
#print("Imax = {}  : X = {}, Y = {}".format(I_max, next_posX, next_posY))
#print("focus = {}".format(Zen.Devices.Focus.ActualPosition))
Zen.Application.Pause("La bille est-elle bien au centre ?")
Zen.Acquisition.StopLive(WF1)
img = Zen.Acquisition.AcquireImage(WF1)
Zen.Application.Documents.Add(img)
#print("focus = {}".format(Zen.Devices.Focus.ActualPosition))
#Lancer Experience LSM
WF2 = ZenExperiment()
WF2.Load('LSM1_test.czexp')

#AF et Centrer la bille 
Zen.Acquisition.FindAutofocus(WF2,300)
Zen.Acquisition.StartContinuous(WF2)
Zen.Application.Pause("La bille est-elle bien au centre ?")
Zen.Acquisition.StopContinuous(WF2)

#Acquisition d'image
image2 = Zen.Acquisition.AcquireImage(WF2)
Zen.Application.Documents.Add(image2)

#Calcul du seuil de saturation 
Bit2 = image2.Metadata.Format
print("Bit = {}".format(Bit2))
BitDepth2 = int(Bit2.Replace("Bit", ""))
saturation2 = 2**BitDepth2 - 2
print("Saturation = {}".format(saturation2))

#Verification de la saturation
ias2 = ZenImageAnalysisSetting()
ias2.Load("billesLSM")
Zen.Analyzing.Analyze(image2, ias2)
tables2 = Zen.Analyzing.AnalyzeToTable(image2, ias2)
table2 = tables2[0]
Zen.Application.Documents.Add(table2)

P_max= -1
for i in range(table2.RowCount) : 
  p = table2.GetValue(i,2)
  if p &gt; P_max : 
    P_max = p
print("P_max = {}".format(P_max))

#Corriger Saturation
while P_max &gt; saturation2 :
 print("La bille est saturee")
 Zen.Acquisition.StartContinuous(WF2)
 Zen.Application.Pause("Veuillez modifier la valeur du Gain !")
 Zen.Acquisition.StopContinuous(WF2)
 image3 = Zen.Acquisition.AcquireImage()
 Zen.Application.Documents.Add(image3)
 print(" Nouveau gain = {}".format(image3.Metadata.DetectorGain))
 Zen.Analyzing.Analyze(image3, ias2)
 tables3 = Zen.Analyzing.AnalyzeToTable(image3, ias2)
 table3 = tables3[0]
 for i in range(table3.RowCount) : 
  p = table3.GetValue(i,2)
 

 


</Text>
  <Author> ROUISSI Mehdi </Author>
  <Description> Acquisition et Analyse d'image de billes de petite taille pour psf (Etude de résolution du système) </Description>
  <Keywords></Keywords>
  <Row>180</Row>
  <Column>13</Column>
</Script>
