# Script : Tracking Gastruloides
# Auteur : ROUISSI Mehdi
# Date : 07/2025
# Description : Cette macro scan la boite de petri et localise les echantillons,
#               Ensuite lance une serie d'acquisition et d'analyse pour detecter la fluorescence.
# ================================================

###Clear Message and Documents
Zen.Application.Documents.RemoveAll(False)
Zen.Application.MacroEditor.ClearMessages()

###Importation des bibliothèques
import clr
import os 
from System import DateTime, TimeSpan
from datetime import datetime, timedelta
import time

###Configuration Objectif et optovar
if Zen.Devices.ObjectiveChanger.ActualPosition != 2 :
  Zen.Devices.ObjectiveChanger.TargetPosition = 2
  Zen.Devices.ObjectiveChanger.Apply()
if Zen.Devices.Optovar.ActualPosition != 3 :
  Zen.Devices.Optovar.TargetPosition = 3
  Zen.Devices.Optovar.Apply()

###Chargement de l'experience et de l'analyse
scan = ZenExperiment()
scan.Load('Gastrl_Scan.czexp')
local = ZenImageAnalysisSetting()
local.Load("Detect_Gatsr")


###Scan de la lame et détection des echantillons
Zen.Acquisition.FindAutofocus(scan)
#Zen.Application.Pause("Modifiez le focus")
tiles = Zen.Acquisition.Execute(scan)
Zen.Analyzing.Analyze(tiles, local)
tables = Zen.Analyzing.AnalyzeToTable(tiles, local)
table = tables[0]

Echt = [[], [], [], [], []]
echtv = 0
max_echtv = 5
Echt_X = -1
Echt_Y = -1

###Validation et sauvegarde des echantillons
for i in range(table.RowCount):
 if echtv &gt;= max_echtv:
  break 
 Echt_X = table.GetValue(i,2)
 Echt_Y = table.GetValue(i,3)
 Zen.Acquisition.StartLive(scan)
 Zen.Devices.Stage.MoveTo(Echt_X, Echt_Y)
 Zen.Acquisition.StopLive(scan)
 Zen.Acquisition.StartLive(scan)
 #Zen.Application.Pause("Live ?")
 v = Zen.Windows.ShowTextBox("Validez l'échantillon {} ".format(i+1),"Cliquez sur ok pour valider ou cancel pour ignorer")
 if v is not None :
   X = Zen.Devices.Stage.ActualPositionX
   Y = Zen.Devices.Stage.ActualPositionY
   Echt[echtv].Add(X)
   Echt[echtv].Add(Y)
   print("Echantillon validé {} : {}".format(echtv+1, Echt[echtv]))
   #print("Echantillon {} : {}".format(i+1, Echt[i]))
   echtv += 1
 else :
   print("Echantillon {} ignoré".format(i+1))
 Zen.Acquisition.StopLive(scan)

###Initialisation des groupes
groupe1 = [{"id": i, "x": Echt[i][0], "y": Echt[i][1], "next_time": datetime.now()} for i in range(5)]
groupe2 = []  
groupe3 = []  

###Boucle D'acquisition
while True:
  current_time = datetime.now()
  
  ###GROUPE 1 : Acquisitions toutes les 30 minutes
  for e in groupe1[:]:
    if Zen.Devices.ObjectiveChanger.ActualPosition != 1 :
     Zen.Devices.ObjectiveChanger.TargetPosition = 1
     Zen.Devices.ObjectiveChanger.Apply()
    if Zen.Devices.Optovar.ActualPosition != 3 :
     Zen.Devices.Optovar.TargetPosition = 3
     Zen.Devices.Optovar.Apply()
     
    if current_time &gt;= e["next_time"]:
      Zen.Devices.Stage.MoveTo(e["x"], e["y"])
      
      GFP = ZenExperiment()
      GFP.Load("Gastrl_GFP.czexp")
      GFP_analysis = ZenImageAnalysisSetting()
      GFP_analysis.Load("Gastrl_GFP")
      
      GFP.ClearTileRegionsAndPositions(0)
      #Zen.Acquisition.FindAutofocus(GFP, 300)
      focus = Zen.Devices.Focus.ActualPosition
      GFP.AddRectangleTileRegion(0, e["x"], e["y"], 2045, 1818, focus)
      image = Zen.Acquisition.Execute(GFP)
      tables = Zen.Analyzing.AnalyzeToTable(image, GFP_analysis)
      table = tables[0]
      
      folder = r"D:\DATA USERS\eqpimagerie\mehdi\Gastruloide\Echantillon{}".format(e["id"]+1)
      if not os.path.exists(folder):
        os.makedirs(folder)
      
      if table.RowCount &gt; 0 :
        tvert = current_time
        newx = table.GetValue(0,3)
        newy = table.GetValue(0,4)
        groupe2.append({"id": e["id"], "x": newx, "y": newy, "tvert": tvert, "index": len(groupe2)})
        groupe1.remove(e)
        image.Save(os.path.join(folder, "Groupe1-2_{}.czi".format(current_time.strftime("%Y-%m-%d_%Hh%M"))))
      else :
        image.Save(os.path.join(folder, "Groupe1_{}.czi".format(current_time.strftime("%Y-%m-%d_%Hh%M"))))
      image.Close()
      e["next_time"] = current_time + timedelta(minutes=30)
      
  ###GROUPE 2 : Acquisition GFP et Mcherry par intervalle croissant
  for e in groupe2[:]:
    tacq = 5*(e["index"]+1)
    next_acq = e["tvert"] + timedelta(minutes=tacq)
    if current_time &gt;= next_acq:
      Zen.Devices.Stage.MoveTo(e["x"], e["y"])
      
      GRFP = ZenExperiment()
      GRFP.Load("Gastrl_G_R.czexp")
      GRFP_analysis = ZenImageAnalysisSetting()
      GRFP_analysis.Load("Gastrl_Mcher")
      
      #GRFP.ClearTileRegionsAndPositions()
      #Zen.Acquisition.FindAutofocus(GRFP, 300)
      focus = Zen.Devices.Focus.ActualPosition
      #GRFP.AddRectangleTileRegion(0, e["x"], e["y"], 2045, 1818, focus)
      image = Zen.Acquisition.Execute(GRFP)
      tables = Zen.Analyzing.AnalyzeToTable(image, GRFP_analysis)
      table = tables[0]
      
      if table.RowCount &gt; 0 :
        groupe3.append({"id": e["id"], "x": e["x"], "y": e["y"], "next_time": current_time + timedelta(minutes=30)})
        groupe2.remove(e)
        image.Save(os.path.join(folder, "Groupe2-3_{}.czi".format(current_time.strftime("%Y-%m-%d_%Hh%M"))))
      else:
        image.Save(os.path.join(folder, "Groupe2_{}.czi".format(current_time.strftime("%Y-%m-%d_%Hh%M"))))
      image.Close()
      e["tvert"] = current_time 
      
  ###GROUPE 3 : Acquisition GFP et Mcherry faible exposition
  for e in groupe3[:]:
    if current_time &gt;= e["next_time"]:
      Zen.Devices.Stage.MoveTo(e["x"], e["y"])
       
      GRFP_lowexpo = ZenExperiment()
      GRFP_lowexpo.Load("Gastrl_G_R_lowexpo.czexp")
      #Zen.Acquisition.FindAutofocus(GRFP_lowexpo,500)
      image = Zen.Acquisition.Execute(GRFP_lowexpo)
      
      image.Save(os.path.join(folder, "Groupe3_{}.czi".format(current_time.strftime("%Y-%m-%d_%Hh%M"))))
      image.close()
      e["next_time"] = current_time + timedelta(minutes=30)
      
###Pause Entre les iterations de la boucle
  time.sleep(5)
